<templateSet group="Unity">
  <template name="log" value="Debug.Log();" description="unity log" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="CSS" value="false" />
      <option name="HTML" value="false" />
      <option name="Handlebars" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSON" value="false" />
      <option name="OTHER" value="true" />
      <option name="TypeScript" value="false" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="dispAdd" value="[Inject(ContextKeys.CONTEXT_DISPATCHER)]&#10;public IEventDispatcher dispatcher { get; set; }" description="Injects context dispatcher" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="CSS" value="false" />
      <option name="HTML" value="false" />
      <option name="Handlebars" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSON" value="false" />
      <option name="OTHER" value="true" />
      <option name="TypeScript" value="false" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="clearChildren" value="public void Clear()&#10;{&#10;    var count = Content.childCount;&#10;    for (var i = 0; i &lt; count; i++)&#10;    {&#10;        DestroyImmediate(Content.GetChild(0).gameObject);&#10;    }&#10;}" description="Add transfomr clear function to clear all of its children." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="CSS" value="false" />
      <option name="HTML" value="false" />
      <option name="Handlebars" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSON" value="false" />
      <option name="OTHER" value="true" />
      <option name="TypeScript" value="false" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="keyHandler" value="[UsedImplicitly]&#10;private void Update()&#10;{&#10;    if (Input.GetKeyDown(KeyCode.Escape))&#10;        dispatcher.Dispatch($END$);&#10;}" description="Adds key handler to monobehaviour." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="CSS" value="false" />
      <option name="HTML" value="false" />
      <option name="Handlebars" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSON" value="false" />
      <option name="OTHER" value="true" />
      <option name="TypeScript" value="false" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="injectModel" value="[Inject]&#10;public $Type$ $Name$Model { get; set; }" description="Injects generic model." toReformat="true" toShortenFQNames="true">
    <variable name="Type" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="Name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="CSS" value="false" />
      <option name="HTML" value="false" />
      <option name="Handlebars" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSON" value="false" />
      <option name="OTHER" value="true" />
      <option name="TypeScript" value="false" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="listEnum" value="$TYPE$ $VAR$ = Enum.GetValues(typeof($TYPE$)).Cast&lt;$TYPE$&gt;().ToList();" description="Gets enums as list" toReformat="true" toShortenFQNames="true">
    <variable name="TYPE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VAR" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="CSS" value="false" />
      <option name="HTML" value="false" />
      <option name="Handlebars" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSON" value="false" />
      <option name="OTHER" value="true" />
      <option name="TypeScript" value="false" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="postConstruct" value="[PostConstruct]&#10;public void OnPostConstruct()&#10;{&#10;    {{cursor}}&#10;}" description="Adds empty PostConstruct function" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="CSS" value="false" />
      <option name="HTML" value="false" />
      <option name="Handlebars" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSON" value="false" />
      <option name="OTHER" value="true" />
      <option name="TypeScript" value="false" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="startFunc" value="protected override void Start()&#10;{&#10;    base.Start();&#10;    {{cursor}}&#10;}" description="Adds overrided Start function to EventView" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="CSS" value="false" />
      <option name="HTML" value="false" />
      <option name="Handlebars" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSON" value="false" />
      <option name="OTHER" value="true" />
      <option name="TypeScript" value="false" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="mediator" value="using strange.extensions.mediation.impl;&#10;$FieldName$&#10;$PATH$&#10;namespace $Type$ &#10;{&#10;    public class $NAME$Mediator : EventMediator&#10;    {&#10;        [Inject]&#10;        public $NAME$View view { get; set; }&#10;&#10;        public override void OnRegister()&#10;        {&#10;            $END$&#10;        }&#10;&#10;        public override void OnRemove()&#10;        {&#10;        }&#10;    }&#10;}" description="Create a mediator" toReformat="true" toShortenFQNames="true">
    <variable name="FieldName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="PATH" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="Type" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="CSS" value="false" />
      <option name="HTML" value="false" />
      <option name="Handlebars" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSON" value="false" />
      <option name="OTHER" value="true" />
      <option name="TypeScript" value="false" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="injectService" value="[Inject]&#10;public $Type$ $Name$Service { get; set; }" description="Injects generic service." toReformat="true" toShortenFQNames="true">
    <variable name="Type" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="Name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="CSS" value="false" />
      <option name="HTML" value="false" />
      <option name="Handlebars" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSON" value="false" />
      <option name="OTHER" value="true" />
      <option name="TypeScript" value="false" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="ContextView" value="[Inject(ContextKeys.CONTEXT_VIEW)]&#10;        public GameObject contextView { get; set; }" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="CSS" value="false" />
      <option name="CUCUMBER_FEATURE_FILE" value="false" />
      <option name="CoffeeScript" value="false" />
      <option name="HTML" value="false" />
      <option name="Handlebars" value="false" />
      <option name="JADE" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSON" value="false" />
      <option name="OTHER" value="true" />
      <option name="SQL" value="false" />
      <option name="TypeScript" value="false" />
      <option name="XML" value="false" />
    </context>
  </template>
</templateSet>